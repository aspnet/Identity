// <auto-generated />
namespace Microsoft.AspNet.Identity
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNet.Identity.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// Optimistic concurrency failure, object has been modified.
        /// </summary>
        internal static string ConcurrencyFailure
        {
            get { return GetString("ConcurrencyFailure"); }
        }

        /// <summary>
        /// Optimistic concurrency failure, object has been modified.
        /// </summary>
        internal static string FormatConcurrencyFailure()
        {
            return GetString("ConcurrencyFailure");
        }

        /// <summary>
        /// An unknown failure has occured.
        /// </summary>
        internal static string DefaultError
        {
            get { return GetString("DefaultError"); }
        }

        /// <summary>
        /// An unknown failure has occured.
        /// </summary>
        internal static string FormatDefaultError()
        {
            return GetString("DefaultError");
        }

        /// <summary>
        /// Default Token Provider
        /// </summary>
        internal static string DefaultTokenProvider
        {
            get { return GetString("DefaultTokenProvider"); }
        }

        /// <summary>
        /// Default Token Provider
        /// </summary>
        internal static string FormatDefaultTokenProvider()
        {
            return GetString("DefaultTokenProvider");
        }

        /// <summary>
        /// Email '{0}' is already taken.
        /// </summary>
        internal static string DuplicateEmail
        {
            get { return GetString("DuplicateEmail"); }
        }

        /// <summary>
        /// Email '{0}' is already taken.
        /// </summary>
        internal static string FormatDuplicateEmail(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateEmail"), p0);
        }

        /// <summary>
        /// Role name '{0}' is already taken.
        /// </summary>
        internal static string DuplicateRoleName
        {
            get { return GetString("DuplicateRoleName"); }
        }

        /// <summary>
        /// Role name '{0}' is already taken.
        /// </summary>
        internal static string FormatDuplicateRoleName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateRoleName"), p0);
        }

        /// <summary>
        /// User name '{0}' is already taken.
        /// </summary>
        internal static string DuplicateUserName
        {
            get { return GetString("DuplicateUserName"); }
        }

        /// <summary>
        /// User name '{0}' is already taken.
        /// </summary>
        internal static string FormatDuplicateUserName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateUserName"), p0);
        }

        /// <summary>
        /// Email '{0}' is invalid.
        /// </summary>
        internal static string InvalidEmail
        {
            get { return GetString("InvalidEmail"); }
        }

        /// <summary>
        /// Email '{0}' is invalid.
        /// </summary>
        internal static string FormatInvalidEmail(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEmail"), p0);
        }

        /// <summary>
        /// The provided PasswordHasherCompatibilityMode is invalid.
        /// </summary>
        internal static string InvalidPasswordHasherCompatibilityMode
        {
            get { return GetString("InvalidPasswordHasherCompatibilityMode"); }
        }

        /// <summary>
        /// The provided PasswordHasherCompatibilityMode is invalid.
        /// </summary>
        internal static string FormatInvalidPasswordHasherCompatibilityMode()
        {
            return GetString("InvalidPasswordHasherCompatibilityMode");
        }

        /// <summary>
        /// The iteration count must be a positive integer.
        /// </summary>
        internal static string InvalidPasswordHasherIterationCount
        {
            get { return GetString("InvalidPasswordHasherIterationCount"); }
        }

        /// <summary>
        /// The iteration count must be a positive integer.
        /// </summary>
        internal static string FormatInvalidPasswordHasherIterationCount()
        {
            return GetString("InvalidPasswordHasherIterationCount");
        }

        /// <summary>
        /// Role name '{0}' is invalid.
        /// </summary>
        internal static string InvalidRoleName
        {
            get { return GetString("InvalidRoleName"); }
        }

        /// <summary>
        /// Role name '{0}' is invalid.
        /// </summary>
        internal static string FormatInvalidRoleName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidRoleName"), p0);
        }

        /// <summary>
        /// Invalid token.
        /// </summary>
        internal static string InvalidToken
        {
            get { return GetString("InvalidToken"); }
        }

        /// <summary>
        /// Invalid token.
        /// </summary>
        internal static string FormatInvalidToken()
        {
            return GetString("InvalidToken");
        }

        /// <summary>
        /// User name '{0}' is invalid, can only contain letters or digits.
        /// </summary>
        internal static string InvalidUserName
        {
            get { return GetString("InvalidUserName"); }
        }

        /// <summary>
        /// User name '{0}' is invalid, can only contain letters or digits.
        /// </summary>
        internal static string FormatInvalidUserName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidUserName"), p0);
        }

        /// <summary>
        /// A user with this login already exists.
        /// </summary>
        internal static string LoginAlreadyAssociated
        {
            get { return GetString("LoginAlreadyAssociated"); }
        }

        /// <summary>
        /// A user with this login already exists.
        /// </summary>
        internal static string FormatLoginAlreadyAssociated()
        {
            return GetString("LoginAlreadyAssociated");
        }

        /// <summary>
        /// No IUserTokenProvider named '{0}' is registered.
        /// </summary>
        internal static string NoTokenProvider
        {
            get { return GetString("NoTokenProvider"); }
        }

        /// <summary>
        /// No IUserTokenProvider named '{0}' is registered.
        /// </summary>
        internal static string FormatNoTokenProvider(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoTokenProvider"), p0);
        }

        /// <summary>
        /// Incorrect password.
        /// </summary>
        internal static string PasswordMismatch
        {
            get { return GetString("PasswordMismatch"); }
        }

        /// <summary>
        /// Incorrect password.
        /// </summary>
        internal static string FormatPasswordMismatch()
        {
            return GetString("PasswordMismatch");
        }

        /// <summary>
        /// Passwords must have at least one digit ('0'-'9').
        /// </summary>
        internal static string PasswordRequiresDigit
        {
            get { return GetString("PasswordRequiresDigit"); }
        }

        /// <summary>
        /// Passwords must have at least one digit ('0'-'9').
        /// </summary>
        internal static string FormatPasswordRequiresDigit()
        {
            return GetString("PasswordRequiresDigit");
        }

        /// <summary>
        /// Passwords must have at least one lowercase ('a'-'z').
        /// </summary>
        internal static string PasswordRequiresLower
        {
            get { return GetString("PasswordRequiresLower"); }
        }

        /// <summary>
        /// Passwords must have at least one lowercase ('a'-'z').
        /// </summary>
        internal static string FormatPasswordRequiresLower()
        {
            return GetString("PasswordRequiresLower");
        }

        /// <summary>
        /// Passwords must have at least one non letter and non digit character.
        /// </summary>
        internal static string PasswordRequiresNonLetterAndDigit
        {
            get { return GetString("PasswordRequiresNonLetterAndDigit"); }
        }

        /// <summary>
        /// Passwords must have at least one non letter and non digit character.
        /// </summary>
        internal static string FormatPasswordRequiresNonLetterAndDigit()
        {
            return GetString("PasswordRequiresNonLetterAndDigit");
        }

        /// <summary>
        /// Passwords must have at least one uppercase ('A'-'Z').
        /// </summary>
        internal static string PasswordRequiresUpper
        {
            get { return GetString("PasswordRequiresUpper"); }
        }

        /// <summary>
        /// Passwords must have at least one uppercase ('A'-'Z').
        /// </summary>
        internal static string FormatPasswordRequiresUpper()
        {
            return GetString("PasswordRequiresUpper");
        }

        /// <summary>
        /// Passwords must be at least {0} characters.
        /// </summary>
        internal static string PasswordTooShort
        {
            get { return GetString("PasswordTooShort"); }
        }

        /// <summary>
        /// Passwords must be at least {0} characters.
        /// </summary>
        internal static string FormatPasswordTooShort(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PasswordTooShort"), p0);
        }

        /// <summary>
        /// Role {0} does not exist.
        /// </summary>
        internal static string RoleNotFound
        {
            get { return GetString("RoleNotFound"); }
        }

        /// <summary>
        /// Role {0} does not exist.
        /// </summary>
        internal static string FormatRoleNotFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RoleNotFound"), p0);
        }

        /// <summary>
        /// Store does not implement IQueryableRoleStore&lt;TRole&gt;.
        /// </summary>
        internal static string StoreNotIQueryableRoleStore
        {
            get { return GetString("StoreNotIQueryableRoleStore"); }
        }

        /// <summary>
        /// Store does not implement IQueryableRoleStore&lt;TRole&gt;.
        /// </summary>
        internal static string FormatStoreNotIQueryableRoleStore()
        {
            return GetString("StoreNotIQueryableRoleStore");
        }

        /// <summary>
        /// Store does not implement IQueryableUserStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIQueryableUserStore
        {
            get { return GetString("StoreNotIQueryableUserStore"); }
        }

        /// <summary>
        /// Store does not implement IQueryableUserStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIQueryableUserStore()
        {
            return GetString("StoreNotIQueryableUserStore");
        }

        /// <summary>
        /// Store does not implement IRoleClaimStore&lt;TRole&gt;.
        /// </summary>
        internal static string StoreNotIRoleClaimStore
        {
            get { return GetString("StoreNotIRoleClaimStore"); }
        }

        /// <summary>
        /// Store does not implement IRoleClaimStore&lt;TRole&gt;.
        /// </summary>
        internal static string FormatStoreNotIRoleClaimStore()
        {
            return GetString("StoreNotIRoleClaimStore");
        }

        /// <summary>
        /// Store does not implement IUserClaimStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserClaimStore
        {
            get { return GetString("StoreNotIUserClaimStore"); }
        }

        /// <summary>
        /// Store does not implement IUserClaimStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserClaimStore()
        {
            return GetString("StoreNotIUserClaimStore");
        }

        /// <summary>
        /// Store does not implement IUserConfirmationStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserConfirmationStore
        {
            get { return GetString("StoreNotIUserConfirmationStore"); }
        }

        /// <summary>
        /// Store does not implement IUserConfirmationStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserConfirmationStore()
        {
            return GetString("StoreNotIUserConfirmationStore");
        }

        /// <summary>
        /// Store does not implement IUserEmailStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserEmailStore
        {
            get { return GetString("StoreNotIUserEmailStore"); }
        }

        /// <summary>
        /// Store does not implement IUserEmailStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserEmailStore()
        {
            return GetString("StoreNotIUserEmailStore");
        }

        /// <summary>
        /// Store does not implement IUserLockoutStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserLockoutStore
        {
            get { return GetString("StoreNotIUserLockoutStore"); }
        }

        /// <summary>
        /// Store does not implement IUserLockoutStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserLockoutStore()
        {
            return GetString("StoreNotIUserLockoutStore");
        }

        /// <summary>
        /// Store does not implement IUserLoginStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserLoginStore
        {
            get { return GetString("StoreNotIUserLoginStore"); }
        }

        /// <summary>
        /// Store does not implement IUserLoginStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserLoginStore()
        {
            return GetString("StoreNotIUserLoginStore");
        }

        /// <summary>
        /// Store does not implement IUserPasswordStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserPasswordStore
        {
            get { return GetString("StoreNotIUserPasswordStore"); }
        }

        /// <summary>
        /// Store does not implement IUserPasswordStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserPasswordStore()
        {
            return GetString("StoreNotIUserPasswordStore");
        }

        /// <summary>
        /// Store does not implement IUserPhoneNumberStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserPhoneNumberStore
        {
            get { return GetString("StoreNotIUserPhoneNumberStore"); }
        }

        /// <summary>
        /// Store does not implement IUserPhoneNumberStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserPhoneNumberStore()
        {
            return GetString("StoreNotIUserPhoneNumberStore");
        }

        /// <summary>
        /// Store does not implement IUserRoleStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserRoleStore
        {
            get { return GetString("StoreNotIUserRoleStore"); }
        }

        /// <summary>
        /// Store does not implement IUserRoleStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserRoleStore()
        {
            return GetString("StoreNotIUserRoleStore");
        }

        /// <summary>
        /// Store does not implement IUserSecurityStampStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserSecurityStampStore
        {
            get { return GetString("StoreNotIUserSecurityStampStore"); }
        }

        /// <summary>
        /// Store does not implement IUserSecurityStampStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserSecurityStampStore()
        {
            return GetString("StoreNotIUserSecurityStampStore");
        }

        /// <summary>
        /// Store does not implement IUserTwoFactorStore&lt;TUser&gt;.
        /// </summary>
        internal static string StoreNotIUserTwoFactorStore
        {
            get { return GetString("StoreNotIUserTwoFactorStore"); }
        }

        /// <summary>
        /// Store does not implement IUserTwoFactorStore&lt;TUser&gt;.
        /// </summary>
        internal static string FormatStoreNotIUserTwoFactorStore()
        {
            return GetString("StoreNotIUserTwoFactorStore");
        }

        /// <summary>
        /// User already has a password set.
        /// </summary>
        internal static string UserAlreadyHasPassword
        {
            get { return GetString("UserAlreadyHasPassword"); }
        }

        /// <summary>
        /// User already has a password set.
        /// </summary>
        internal static string FormatUserAlreadyHasPassword()
        {
            return GetString("UserAlreadyHasPassword");
        }

        /// <summary>
        /// User already in role '{0}'.
        /// </summary>
        internal static string UserAlreadyInRole
        {
            get { return GetString("UserAlreadyInRole"); }
        }

        /// <summary>
        /// User already in role '{0}'.
        /// </summary>
        internal static string FormatUserAlreadyInRole(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UserAlreadyInRole"), p0);
        }

        /// <summary>
        /// User is locked out.
        /// </summary>
        internal static string UserLockedOut
        {
            get { return GetString("UserLockedOut"); }
        }

        /// <summary>
        /// User is locked out.
        /// </summary>
        internal static string FormatUserLockedOut()
        {
            return GetString("UserLockedOut");
        }

        /// <summary>
        /// Lockout is not enabled for this user.
        /// </summary>
        internal static string UserLockoutNotEnabled
        {
            get { return GetString("UserLockoutNotEnabled"); }
        }

        /// <summary>
        /// Lockout is not enabled for this user.
        /// </summary>
        internal static string FormatUserLockoutNotEnabled()
        {
            return GetString("UserLockoutNotEnabled");
        }

        /// <summary>
        /// User {0} does not exist.
        /// </summary>
        internal static string UserNameNotFound
        {
            get { return GetString("UserNameNotFound"); }
        }

        /// <summary>
        /// User {0} does not exist.
        /// </summary>
        internal static string FormatUserNameNotFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UserNameNotFound"), p0);
        }

        /// <summary>
        /// User is not in role '{0}'.
        /// </summary>
        internal static string UserNotInRole
        {
            get { return GetString("UserNotInRole"); }
        }

        /// <summary>
        /// User is not in role '{0}'.
        /// </summary>
        internal static string FormatUserNotInRole(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UserNotInRole"), p0);
        }

        /// <summary>
        /// {0} : Failed : {1}
        /// </summary>
        internal static string LogIdentityResultFailure
        {
            get { return GetString("LogIdentityResultFailure"); }
        }

        /// <summary>
        /// {0} : Failed : {1}
        /// </summary>
        internal static string FormatLogIdentityResultFailure(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogIdentityResultFailure"), p0, p1);
        }

        /// <summary>
        /// {0} : Success
        /// </summary>
        internal static string LogIdentityResultSuccess
        {
            get { return GetString("LogIdentityResultSuccess"); }
        }

        /// <summary>
        /// {0} : Success
        /// </summary>
        internal static string FormatLogIdentityResultSuccess(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogIdentityResultSuccess"), p0);
        }

        /// <summary>
        /// {0} : Result : {1}
        /// </summary>
        internal static string LoggingSigninResult
        {
            get { return GetString("LoggingSigninResult"); }
        }

        /// <summary>
        /// {0} : Result : {1}
        /// </summary>
        internal static string FormatLoggingSigninResult(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LoggingSigninResult"), p0, p1);
        }

        /// <summary>
        /// {0} for user: {1}
        /// </summary>
        internal static string LoggingResultMessage
        {
            get { return GetString("LoggingResultMessage"); }
        }

        /// <summary>
        /// {0} for user: {1}
        /// </summary>
        internal static string FormatLoggingResultMessage(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LoggingResultMessage"), p0, p1);
        }

        /// <summary>
        /// {0} for role: {1}
        /// </summary>
        internal static string LoggingResultMessageForRole
        {
            get { return GetString("LoggingResultMessageForRole"); }
        }

        /// <summary>
        /// {0} for role: {1}
        /// </summary>
        internal static string FormatLoggingResultMessageForRole(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LoggingResultMessageForRole"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
